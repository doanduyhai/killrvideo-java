<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.killrvideo</groupId>
    <artifactId>server</artifactId>
    <version>1.1.2</version>

    <properties>
        <start-class>killrvideo.KillrVideoServer</start-class>
        <grpc.version>1.0.0</grpc.version>
        <achilles.version>5.1.5</achilles.version>
        <dse.version>1.2.3</dse.version>
        <!-- <cassandra.version>3.2.0</cassandra.version> -->
        <guava.version>18.0</guava.version>
        <commons.lang3.version>3.3.2</commons.lang3.version>
        <commons-codec.version>1.10</commons-codec.version>
        <commons-collections.version>4.1</commons-collections.version>
        <javax.inject.version>1</javax.inject.version>
        <spring-boot.version>1.4.0.RELEASE</spring-boot.version>
        <logback.version>1.1.2</logback.version>
        <spring-boot.version>1.2.0.RELEASE</spring-boot.version>
        <validation.api.version>1.1.0.Final</validation.api.version>
        <javax.el.api.version>2.2.4</javax.el.api.version>
        <validator.version>5.2.2.Final</validator.version>
        <!-- <netty.version>4.1.3.Final</netty.version> -->
        <etcd4j.version>1.2</etcd4j.version>

        <mockito.version>1.9.5</mockito.version>
        <assertj-core.version>1.7.0</assertj-core.version>
        <junit.version>4.10</junit.version>

    </properties>

    <dependencies>
        <dependency>
            <groupId>info.archinnov</groupId>
            <artifactId>achilles-core</artifactId>
            <version>${achilles.version}</version>
            <exclusions>
                <!-- <exclusion>
                    <groupId>io.netty</groupId>
                    <artifactId>netty-handler</artifactId>
                </exclusion> -->
                <exclusion>
                    <groupId>com.datastax.cassandra</groupId>
                    <artifactId>cassandra-driver-core</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.datastax.cassandra</groupId>
                    <artifactId>cassandra-driver-extras</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Even though the point here is to go "pure"
        java, Achilles has some really useful utilities
        that I am not ready to tackle just yet so I am including
        pieces and parts to handle those until a later time. -->
        <!-- <dependency>
            <groupId>info.archinnov</groupId>
            <artifactId>achilles-common</artifactId>
            <version>${achilles.version}</version>
        </dependency> -->

        <!-- Java driver for DSE -->
        <!-- Note: I copied the netty-handler exclusion from what
        DuyHai did with Achilles to resolve issues I was having
        with the Netty Handler.  Not sure why this works, didn't
        really look into it, but it does.  -->
        <dependency>
            <groupId>com.datastax.dse</groupId>
            <artifactId>dse-java-driver-core</artifactId>
            <version>${dse.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>io.netty</groupId>
                    <artifactId>netty-handler</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.datastax.dse</groupId>
            <artifactId>dse-java-driver-mapping</artifactId>
            <version>${dse.version}</version>
        </dependency>
        <dependency>
            <groupId>com.datastax.dse</groupId>
            <artifactId>dse-java-driver-extras</artifactId>
            <version>${dse.version}</version>
        </dependency>

        <!-- Include the object mapper from the provided Cassandra
        driver seen here -> http://docs.datastax.com/en/developer/java-driver/3.1/manual/object_mapper
        This should help replace some of the lost boiler plate
        capabilities we had from Achilles -->
        <!-- <dependency>
            <groupId>com.datastax.cassandra</groupId>
            <artifactId>cassandra-driver-core</artifactId>
            <version>${cassandra.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>io.netty</groupId>
                    <artifactId>netty-handler</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.datastax.cassandra</groupId>
            <artifactId>cassandra-driver-mapping</artifactId>
            <version>${cassandra.version}</version>
        </dependency>
        <dependency>
            <groupId>com.datastax.cassandra</groupId>
            <artifactId>cassandra-driver-extras</artifactId>
            <version>${cassandra.version}</version>
        </dependency> -->


        <!-- Added explicit call to guava version 18 because of a conflict
         between the dependency in the DSE driver and the one used by the
         core cassandra driver.  Actual call is to MoreExecutors.newDirectExecutorService()
         in both CommentServiceTest and VideoCatalogServiceTest.  newDirectExecutorService()
         does not exist in a previous version called by the DSE library. -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>${guava.version}</version>
        </dependency>

        <!-- Bean Validation -->
        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <version>${validation.api.version}</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>${validator.version}</version>
        </dependency>
        <dependency>
            <groupId>javax.el</groupId>
            <artifactId>javax.el-api</artifactId>
            <version>${javax.el.api.version}</version>
        </dependency>

        <dependency>
            <groupId>io.grpc</groupId>
            <artifactId>grpc-all</artifactId>
            <version>${grpc.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>${commons.lang3.version}</version>
        </dependency>

        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>${commons-codec.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-collections4</artifactId>
            <version>${commons-collections.version}</version>
        </dependency>

        <dependency>
            <groupId>com.xqbase</groupId>
            <artifactId>etcd4j</artifactId>
            <version>${etcd4j.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>com.google.guava</groupId>
                    <artifactId>guava</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!--@Inject-->
        <dependency>
            <groupId>javax.inject</groupId>
            <artifactId>javax.inject</artifactId>
            <version>${javax.inject.version}</version>
        </dependency>

        <!--Spring-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>

        <!-- Logging -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
        </dependency>

        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
            <version>${logback.version}</version>
        </dependency>

        <!--TEST-->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>${assertj-core.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- <dependency>
            <groupId>info.archinnov</groupId>
            <artifactId>achilles-junit</artifactId>
            <version>${achilles.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>info.archinnov</groupId>
            <artifactId>achilles-embedded</artifactId>
            <version>${achilles.version}</version>
            <scope>test</scope>
        </dependency> -->
    </dependencies>

    <build>
        <extensions>
            <extension>
                <groupId>kr.motd.maven</groupId>
                <artifactId>os-maven-plugin</artifactId>
                <version>1.4.1.Final</version>
            </extension>
        </extensions>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.xolstice.maven.plugins</groupId>
                <artifactId>protobuf-maven-plugin</artifactId>
                <version>0.5.0</version>
                <configuration>
                    <protoSourceRoot>${basedir}/lib/killrvideo-service-protos/src</protoSourceRoot>
                    <!--
                      The version of protoc must match protobuf-java. If you don't depend on
                      protobuf-java directly, you will be transitively depending on the
                      protobuf-java version that grpc depends on.
                    -->
                    <protocArtifact>com.google.protobuf:protoc:3.0.0:exe:${os.detected.classifier}</protocArtifact>
                    <pluginId>grpc-java</pluginId>
                    <pluginArtifact>io.grpc:protoc-gen-grpc-java:0.14.0:exe:${os.detected.classifier}</pluginArtifact>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                            <goal>compile-custom</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!--<plugin>-->
                <!--<artifactId>maven-antrun-plugin</artifactId>-->
                <!--<version>1.6</version>-->
                <!--<executions>-->
                    <!--<execution>-->
                        <!--<phase>process-sources</phase>-->
                        <!--<configuration>-->
                            <!--<target>-->
                                <!--<delete dir="${project.basedir}/src/main/generated/" includeemptydirs="true"/>-->
                                <!--<move todir="${project.basedir}/src/main/generated//killrvideo" overwrite="true">-->
                                    <!--<fileset dir="${project.build.directory}/generated-sources/protobuf/grpc-java/killrvideo"/>-->
                                    <!--<fileset dir="${project.build.directory}/generated-sources/protobuf/java/killrvideo"/>-->
                                <!--</move>-->
                            <!--</target>-->
                        <!--</configuration>-->
                        <!--<goals>-->
                            <!--<goal>run</goal>-->
                        <!--</goals>-->
                    <!--</execution>-->
                <!--</executions>-->
            <!--</plugin>-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot.version}</version>
                <configuration>
                    <mainClass>${start-class}</mainClass>
                    <!--<jvmArguments>-Xdebug</jvmArguments>-->
                    <!--<jvmArguments>-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005</jvmArguments>-->
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
